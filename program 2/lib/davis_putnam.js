// Generated by CoffeeScript 1.9.0
(function() {
  var dp;

  Array.prototype.clone = function() {
    return this.slice(0);
  };



  dp = function(atoms) {
    var atom, v, dp1, obvious_assign, propagate, get_pure_literals, hasSingletons;
    var foundAtoms = [];

    atoms = atoms.map( function(el){
      return el.split(' ');
    });
    
    atom = function (a){
      return Math.abs(a);
    }

    hasSingletons = function(set){
      return set.some(function(clause){
        return clause.length === 1;
      });
    };


    get_pure_literals = function (atoms){
      var pl = {};
      var literals = [];

      // we want to put negs/false in the 0th position ; pos/true in the 1st position
      // we'll put the original el value as the value at that position (bonus, free space!)
      // later, any obj (pl[key]) with length 1 will be considered a pure literal
      //
      // note, this could have been done with an array, saving the extra loop down below,
      // but doing so incurs extra overhead for removing the null item from the 
      // array if the literal was positive (inserted at pos 1). 
      //

      atoms.map(function(clause){
        clause.map(function(el){
          // get the character w/o the sign
          var key = atom(el);

          // if this is the first time we've seen this atom
          if(!(key in pl)){
            pl[key]={};
          }

          // use a ternary here to determine the el's sign
          // ~A = 0 ; A = 1
          pl[key][ (el>0)?1:0 ] = el;
        });
      });


      // now that we have the table filled out, 
      // let's return only those that we've seen as only one polarity
      for(i in pl){

        // any object with size 1 is our literal
        if(Object.keys(pl[i]).length === 1){

          // we don't know if the key here is 1 or 0, so the
          // easiest way to get the value of the first item w/o knowing the key name
          // is to loop and grab the val
          for(j in pl[i]){
            literals.push(pl[i][j]);
            continue;
          }
        }
      }

      return literals;
    };

    removeClauses_Literals = function (set, literals){

        // we'll always have a nested array
        // if any literal matches an atom, remove the clause from the set
        // (return false for every match)
      return set.filter( function(el){ 
        return !el.some(function(el){
          return literals.some(function(l){
            return el === l 
          });
        }); 
      });
    }
    obvious_assign = function(l, v) {
      // if l>0, it's true, else false
      v[atom(l)] = l > 0;
      return v;
    };  

    propagate = function(a, s, v) {
      
      return s.filter(function(c){

        // if ((A in C and V[A]=TRUE) or (~A in C and V[A]==FALSE))
        // then delete C from S
        if((c.indexOf(a)  > -1) && (v[a]===true) || (c.indexOf(-a) > -1) && (v[a] === false)){
          return false;
        }

        // if(A in C and V[A]==FALSE) then delete A from C
        // if (~A in C and V[A]==TRUE) then delete ~A from C;
        c = c.filter(function(el){
          return !((el === a && v[a]==false) || (-(el) === a && v[a]==true));
        });
       
      });  
    };


    dp1 = function (atoms, s, v) {
      var a,literals,singletons,keepLooping;
          // take the incoming string disjunctions, convert them to a 2d array

      keepLooping = true;
      // Loop as long as there are easy cases to cherry pick */
      while (keepLooping) {       
        /*  BASE OF THE RECURSION: SUCCESS OR FAILURE */
        // Success: All clauses are satisfied
        if(typeof s != "undefined" && s != null && s.length == 0){
          for(a in atoms){
            //if V[A] == UNBOUND then assign V[A] either TRUE or FALSE;
          }
          return v;

        }
        else if (false/*some clause in S is empty */ ){
          //nil
          return;

        }


        singletons = [];
        /* EASY CASES: PURE LITERAL ELIMINATION AND FORCED ASSIGNMENT */  
        literals = get_pure_literals(s);

        /* Pure literal elimination */
        if( literals.length ){
          v = obvious_assign(literals,v);
          s = removeClauses_Literals(s, literals);

        /* Forced assignment */
        }else if(hasSingletons(s)){
          v = obvious_assign(singletons,v);
          s = removeClauses_Literals(s, literals);
        
         /* No easy cases found */
        }else{
          keepLooping = false;
        }
      }

      
      return s;
    };


/////////////////


    dp1(s,v);


  };

}).call(this);
